JavaScript Data Types:-
--------------------------------
JavaScript Data Types

JavaScript variables can hold many data types: numbers, strings, arrays, objects and more:
Example:-
-------------
var length = 16;                               // Number
var lastName = "Johnson";                      // String
var cars = ["Saab", "Volvo", "BMW"];           // Array
var x = {firstName:"John", lastName:"Doe"};    // Object

The Concept of Data Types:-
------------------------------------------

In programming, data types is an important concept.

To be able to operate on variables, it is important to know something about the type.

Without data types, a computer cannot safely solve this:-

var x = 16 + "Volvo";

Does it make any sense to add "Volvo" to sixteen? Will it produce an error or will it produce a result?

JavaScript will treat the example above as:
var x = "16" + "Volvo";

Example:-
-------------
<!DOCTYPE html>
<html>
<body>

<p>When adding a number and a string, JavaScript will treat the number as a string.</p>

<p id="demo"></p>

<script>
var x = 16 + "Volvo";
document.getElementById("demo").innerHTML = x;
</script>

</body>
</html>

JavaScript evaluates expressions from left to right. Different sequences can produce different results:-

<!DOCTYPE html>
<html>
<body>

<p id="demo"></p>

<script>
var x = "Volvo" + 16 + 4;
document.getElementById("demo").innerHTML = x;
</script>

</body>
</html>


In the first example, JavaScript treats 16 and 4 as numbers, until it reaches "Volvo".

In the second example, since the first operand is a string, all operands are treated as strings.

JavaScript Has Dynamic Types:-
-------------------------------------------
JavaScript has dynamic types. This means that the same variable can be used as different types:-

Example:-
------------
var x;               // Now x is undefined
var x = 5;           // Now x is a Number
var x = "John";      // Now x is a String

JavaScript Strings:-
----------------------------
A string (or a text string) is a series of characters like "John Doe".

Strings are written with quotes. You can use single or double quotes:


Example:-
---------------
var carName = "Volvo XC60";   // Using double quotes
var carName = 'Volvo XC60';   // Using single quotes

You can use quotes inside a string, as long as they don't match the quotes surrounding the string:

Example:-
------------
<!DOCTYPE html>
<html>
<body>

<p id="demo"></p>

<script>
var carName1 = "Volvo XC60";
var carName2 = 'Volvo XC60';
var answer1 = "It's alright";
var answer2 = "He is called 'Johnny'";
var answer3 = 'He is called "Johnny"';

document.getElementById("demo").innerHTML =
carName1 + "<br>" + 
carName2 + "<br>" + 
answer1 + "<br>" + 
answer2 + "<br>" + 
answer3;
</script>

</body>
</html>


You will learn more about strings later in this tutorial.

JavaScript Numbers:-
--------------------------------
JavaScript has only one type of numbers.

Numbers can be written with, or without decimals:

Example:-
-------------
var x1 = 34.00;     // Written with decimals
var x2 = 34;        // Written without decimals

Extra large or extra small numbers can be written with scientific (exponential) notation:

Example:-
--------------
<!DOCTYPE html>
<html>
<body>

<p id="demo"></p>

<script>
var x1 = 34.00;
var x2 = 34;
var y = 123e5;
var z = 123e-5;

document.getElementById("demo").innerHTML = x1 + "<br>" + x2 + "<br>" + y + "<br>" + z
</script>

</body>
</html>

You will learn more about numbers later in this tutorial.

JavaScript Booleans:-
----------------------------
Booleans can only have two values: true or false.

Example:-
------------

var x = true;
var y = false;

Booleans are often used in conditional testing.

You will learn more about conditional testing later in this tutorial.

JavaScript Arrays:-
-------------------------
JavaScript arrays are written with square brackets.

Array items are separated by commas.

The following code declares (creates) an array called cars, containing three items (car names):

Example:-
--------------
<!DOCTYPE html>
<html>
<body>

<p id="demo"></p>

<script>
var cars = ["Saab","Volvo","BMW"];

document.getElementById("demo").innerHTML = cars[0];
</script>

</body>
</html>

Array indexes are zero-based, which means the first item is [0], second is [1], and so on.

You will learn more about arrays later in this tutorial.

JavaScript Objects:-
--------------------------

JavaScript objects are written with curly braces.

Object properties are written as name:value pairs, separated by commas.

Example:-
-------------
<!DOCTYPE html>
<html>
<body>
<p id="demo"></p>

<script>
var person = {
    firstName : "John",
    lastName  : "Doe",
    age       : 50,
    eyeColor  : "blue"
};

document.getElementById("demo").innerHTML =
person.firstName + " is " + person.age + " years old.";
</script>

</body>
</html>


The object (person) in the example above has 4 properties: firstName, lastName, age, and eyeColor.

You will learn more about objects later in this tutorial.

The typeof Operator:-
-------------------------------
You can use the JavaScript typeof operator to find the type of a JavaScript variable:

Example:-
--------------
<!DOCTYPE html>
<html>
<body>

<p>The typeof operator returns the type of a variable or an expression.</p>

<p id="demo"></p>

<script>
document.getElementById("demo").innerHTML = 
typeof "john" + "<br>" + 
typeof 3.14 + "<br>" +
typeof false + "<br>" +
typeof [1,2,3,4] + "<br>" +
typeof {name:'john', age:34};
</script>

</body>
</html>


Undefined:-
----------------
In JavaScript, a variable without a value, has the value undefined. The typeof is also undefined.

Example:-
--------------
<!DOCTYPE html>
<html>
<body>

<p>Both the value, and the data type, of a variable with no value is <b>undefined</b>.</p>

<p id="demo"></p>

<script>
var person;
document.getElementById("demo").innerHTML =
person + "<br>" + typeof person;
</script>

</body>
</html> 

Any variable can be emptied, by setting the value to undefined. The type will also be undefined.

Example:-
------------
<!DOCTYPE html>
<html>
<body>

<p>Variables can be emptied by setting the value to <b>undefined</b>.</p>

<p id="demo"></p>

<script>
var person = {firstName:"John", lastName:"Doe", age:50, eyeColor:"blue"};
var person = undefined;
document.getElementById("demo").innerHTML =
person + "<br>" + typeof person;
</script>

</body>
</html> 

Empty Values:-
--------------------

An empty value has nothing to do with undefined.

An empty string variable has both a value and a type.

Example:-
-------------
<!DOCTYPE html>
<html>
<body>

<p id="demo"></p>

<script>
var car = "";
document.getElementById("demo").innerHTML =
"The value is: " +
car + "<br>" +
"The type is:" + typeof car;
</script>

</body>
</html>


Null:-
------
In JavaScript null is "nothing". It is supposed to be something that doesn't exist.

Unfortunately, in JavaScript, the data type of null is an object.

Note :-
---------
You can consider it a bug in JavaScript that typeof null is an object. It should be null.

You can empty an object by setting it to null:

Example:-
------------
<!DOCTYPE html>
<html>
<body>

<p>Objects can be emptied by setting the value to <b>null</b>.</p>

<p id="demo"></p>

<script>
var person = {firstName:"John", lastName:"Doe", age:50, eyeColor:"blue"};
var person = null;
document.getElementById("demo").innerHTML = typeof person;
</script>

</body>
</html> 

You can also empty an object by setting it to undefined:

Example:-
------------
<!DOCTYPE html>
<html>
<body>

<p>Objects can be emptied by setting the value to <b>undefined</b>.</p>

<p id="demo"></p>

<script>
var person = {firstName:"John", lastName:"Doe", age:50, eyeColor:"blue"};
var person = undefined;
document.getElementById("demo").innerHTML = typeof person;
</script>

</body>
</html> 

Difference Between Undefined and Null:-
-------------------------------------------------------
<!DOCTYPE html>
<html>
<body>

<p id="demo"></p>

<script>
document.getElementById("demo").innerHTML =
typeof undefined + "<br>" +
typeof null + "<br>" +
(null === undefined) + "<br>" +
(null == undefined);
</script>

</body>
</html> 
